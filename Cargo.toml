[package]
name = "libraryms"
version = "0.1.0"
edition = "2021"
publish = false

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
anyhow = "1.0.66"
console_error_panic_hook = "0.1.7"
futures = "0.3.25"
cfg-if = "1.0.0"
leptos = { version = "0.2.4", default-features = false, features = ["serde"] }
leptos_axum = { optional = true, version = "0.2.4", default-features = false }
leptos_meta = { version = "0.2.4", default-features = false }
leptos_router = { version = "0.2.4", default-features = false }
leptos_reactive = { version = "0.2.4", default-features = false }
serde = { version = "1.0.148", features = ["derive"] }
serde_json = "1.0.89"
reqwest = { optional = true, version = "0.11.13", features = ["json"] }
axum = { optional = true, version = "0.6.1", features = ["http2", "macros", "headers"] }
tower = { optional = true, version = "0.4.13" }
tower-http = { optional = true, version = "0.4.0", features = ["fs", "trace", "compression-gzip", "compression-deflate", "compression-zstd", "async-compression"] }
tokio = { optional = true, version = "1.22.0", features = ["full"] }
http = { version = "0.2.8" }
thiserror = "1.0.38"
wasm-bindgen = "0.2"
time = { version = "0.3.19", features = ["formatting", "parsing", "macros", "serde-human-readable"] }
toml = { optional = true, version = "0.7.2" }
clap = { optional = true, version = "4.1.6", features = ["derive", "error-context", "help", "std", "suggestions", "usage"] }
tracing = { version = "0.1.37" }
tracing-subscriber = { optional = true, version = "0.3.16" }
lazy_static = "1.4.0"
sqlx = { optional = true, version = "0.6.3", features = ["time", "postgres", "offline", "uuid", "runtime-tokio-native-tls", "json", "macros"] }
ldap3 = { optional = true, version = "0.11.1" }
jsonwebtoken = { optional = true, version = "8.3.0", default-features = false }
cookie = { optional = true, version = "0.17.0" }
tracing-wasm = "0.2.1"

[features]
default = ["csr"]
csr = ["leptos/csr", "leptos_meta/csr", "leptos_router/csr"]
hydrate = ["leptos/hydrate", "leptos_meta/hydrate", "leptos_router/hydrate"]
ssr = ["dep:axum", "dep:tower", "dep:tower-http", "dep:tokio", "leptos/ssr", "leptos_meta/ssr", "leptos_router/ssr", "dep:leptos_axum", "dep:toml", "dep:sqlx", "dep:ldap3", "dep:jsonwebtoken", "dep:cookie", "dep:reqwest", "dep:clap", "dep:tracing-subscriber"]

[package.metadata.cargo-all-features]
denylist = ["axum", "tower", "tower-http", "tokio", "leptos_axum"]
skip_feature_sets = [["csr", "ssr"], ["csr", "hydrate"], ["ssr", "hydrate"]]

[package.metadata.leptos]
# The name used by wasm-bindgen/cargo-leptos for the JS/WASM bundle. Defaults to the crate name
output-name = "libraryms"
# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"
# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"
# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS. The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css
style-file = "style/output.css"
# [Optional] Files in the asset-dir will be copied to the site-root directory
assets-dir = "public"
# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3000"
# The port to use for automatic reload monitoring
reload-port = 3001
# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
end2end-cmd = "npx playwright test"
#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"
# Set by cargo-leptos watch when building with tha tool. Controls whether autoreload JS will be included in the head
watch = false
# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"
# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = ["ssr"]

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = ["hydrate"]

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false
